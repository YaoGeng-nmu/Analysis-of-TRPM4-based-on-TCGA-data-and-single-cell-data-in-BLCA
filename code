###Heatmap
rm(list = ls())
#source('requiredPcg.R')
setwd('D:/HuaweiMoveData/Users/Desktop/BLCA')
path = 'D:/HuaweiMoveData/Users/Desktop/BLCA'
if(!file.exists(path)) dir.create(path)
#install.packages("pheatmap")
#gene = c('TRPM4') 
library(pheatmap)
marker = read.table('D:/HuaweiMoveData/Users/Desktop/Immunemarker.txt',header = T,sep='\t',row.names=1)
expr = read.csv('D:/HuaweiMoveData/Users/Desktop/dat.select.txt',header=T,row.names=1,sep='\t')
sub = read.table('D:/HuaweiMoveData/Users/Desktop/StromalScore_Group3.txt',header=T,row.names=1,sep='\t')
sub = sub[order(sub$Group),]

color = list(Group = c(`Low_TRPM4`='#425792',`High_TRPM4`='#dc422c'))
mat = expr[intersect(rownames(marker),rownames(expr)),intersect(rownames(sub),colnames(expr))]
pdf(paste0(path,'/immunomodulators.Group.pdf'),width=20,height=40,useDingbats=F)
print(pheatmap(mat,show_colnames = F,scale = 'row',cluster_cols=F,cluster_rows=F,fontsize_row = 6,cellheight = 6,
               breaks = seq(-4,4,length.out=20),color = colorRampPalette(colors = c("blue", "white","yellow"))(20),
               annotation_row = marker,annotation_col = sub,border_color = NA,annotation_colors=color))
dev.off()

###ESTIMATE
setwd("D:/HuaweiMoveData/Users/Desktop/data")
rm(list = ls())
library(utils)
rforge <- "http://r-forge.r-project.org"
#install.packages("estimate", repos=rforge, dependencies=TRUE)
library(estimate)
help(package="estimate")
exp.file ="D:/HuaweiMoveData/Users/Desktop/SARC.expression.txt"
in.gct.file = "ESTIMATE_input.gct"
outputGCT(exp.file, in.gct.file)
# Gene filtering: compare and filter the genes in the input GCT-formatted expression profile files with the common genes in the software.
filterCommonGenes(input.f = exp.file,
                  output.f = in.gct.file,
                  id = "GeneSymbol")
# After the filtering process is completed, a filtered GCT expression profile file will be generated for subsequent ESTIMATE analysis.
out.score.file = "ESTIMATE_score.gct"
estimateScore(in.gct.file,
              out.score.file,
              platform = "affymetrix")   # Choose Illumina if you are dealing with TCGA or sequencing data; otherwise, choose another platform.
plotPurity(scores=out.score.file) # The choice of sequencing platform has no effect on the computation results if you use your own data sample matrix.

estimateScore(in.gct.file,
              out.score.file,
              platform="affymetrix")
#[1] "1 gene set: StromalSignature overlap=134"
#[1] "2 gene set: ImmuneSignature overlap=135"
#plotPurity(scores = out.score.file)
#Plotting tumor purity based on ESTIMATE score

#Triangular correlation heat map
install.packages("corrplot")
library(corrplot)
setwd('D:/HuaweiMoveData/Users/Desktop/BLCA') 
inputFile="D:/HuaweiMoveData/Users/Desktop/BLCA/triangle.txt" 
#updateR(fast=TRUE,cran_mirror="https://mirrors.ustc.edu.cn/CRAN/")
rt=read.table(inputFile,sep="\t",header=T,check.names=F,row.names=1)  
rt=t(rt)   
M=cor(rt)  

pdf(file="corpot1.pdf",width=9,height=9)
corrplot(M,
         method = "circle",
         order = "hclust", 
         type = "upper",
         col=colorRampPalette(c("green", "white", "red"))(50)
)
dev.off()

setwd("D:/HuaweiMoveData/Users/Desktop/BLCA")
##install.packages("patchwork")
library(patchwork)
library(ggplot2)
library(RColorBrewer)
windowsFonts(A=windowsFont("Times New Roman"),
             B=windowsFont("Times New Roman"))
df<-read.csv("D:/HuaweiMoveData/Users/Desktop/111.txt",row.names = 1)
p2<-ggplot(df, aes(x=Group, y=Immune_score))+#Replace y = pH with TN SOC TK TP AP AK AN, and substitute p1 with p2, p3, p4, p5, p6, p7, and p8.
  geom_violin(aes(fill =as.factor(Group),color=as.factor(Group)), trim = FALSE)+
  geom_boxplot(aes(fill=as.factor(Group)),notch = F,width=0.3)+
  geom_jitter(aes(fill =as.factor(Group),color=as.factor(Group)), position=position_jitter(0.17), 
              size=1.5,color="white")+
  theme_bw(base_line_size = 1.05,base_rect_size = 1.05)+
  theme(axis.text=element_text(colour='black',size=12))+
  labs(x="Group", y="pH", color = "",fill = "",par(cex.lab = 15))+
  scale_fill_manual(values=c("#F3AC06","#2f34f5"))+ 
  scale_color_manual(values=c("#F3AC06","#2f34f5"))+
  theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank(),legend.position = "none") 
library(patchwork)
(p2|p2|p2|p2)/(p2|p2|p2|p2)

#The correlation regression curve
install.packages("ggplot2")
install.packages("ggpubr")
install.packages("ggExtra")
#Load the package
library(ggplot2)
library(ggpubr)
library(ggExtra)

inputFile="D:/HuaweiMoveData/Users/Desktop/BLCA-0.txt"      
gene1="TRPM4"             #The name of the first gene.
gene2="CTLA4"              #The name of the second gene.
setwd("D:/HuaweiMoveData/Users/Desktop/BLCA")
rt=read.table(inputFile,sep="\t",header=T,check.names=F,row.names=1)
x=as.numeric(rt[gene1,])
y=as.numeric(rt[gene2,])
df1=as.data.frame(cbind(x,y))
corT=cor.test(x,y,method="pearson")
cor=corT$estimate
pValue=corT$p.value
p1=ggplot(df1, aes(x, y)) + 
  xlab(gene1)+ylab(gene2)+
  geom_point()+ geom_smooth(method="lm",formula = y ~ x) + theme_bw()+
  stat_cor(method = 'pearson', aes(x =x, y =y))
p2=ggMarginal(p1, type = "density", xparams = list(fill = "orange"),yparams = list(fill = "blue"))
pdf(file="cor.pdf",width=5,height=4.8)
print(p1)
dev.off()
pdf(file="cor.density.pdf",width=5,height=5)
print(p2)
dev.off()

# options("repos"= c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
# options(BioC_mirror="http://mirrors.tuna.tsinghua.edu.cn/bioconductor/")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")

depens<-c('GSEABase', 'GSVA', 'cancerclass', 'mixOmics', 'sparrow', 'sva' , 'ComplexHeatmap' )
for(i in 1:length(depens)){
  depen<-depens[i]
  if (!requireNamespace(depen, quietly = TRUE))  BiocManager::install(depen,update = FALSE)
}

if (!requireNamespace("CoxBoost", quietly = TRUE))
  devtools::install_github("binderh/CoxBoost")

if (!requireNamespace("fastAdaboost", quietly = TRUE))
  devtools::install_github("souravc83/fastAdaboost")

if (!requireNamespace("Mime", quietly = TRUE))
  devtools::install_github("l-magnificence/Mime")

library(Mime1)

load("./External data/Example.cohort.Rdata") # Data on survival and gene expression
list_train_vali_Data[["Dataset1"]][1:5,1:5]

res <- ML.Dev.Prog.Sig(train_data = list_train_vali_Data$Dataset1,
                       list_train_vali_Data = list_train_vali_Data,
                       unicox.filter.for.candi = T,
                       unicox_p_cutoff = 0.05,
                       candidate_genes = genelist,
                       mode = 'all',nodesize =5,seed = 5201314 )

data2 <- data2 %>% 
  dplyr::select(ID , OS.time , OS, genelist )

cindex_dis_all(res,
               validate_set = names(list_train_vali_Data)[-1],
               order = names(list_train_vali_Data),
               width = 0.35
)

cindex_dis_select(res,
                  model="StepCox[forward] + plsRcox",
                  order= names(list_train_vali_Data))

survplot <- vector("list",2) 
for (i in c(1:2)) {
  print(survplot[[i]]<-rs_sur(res, model_name = "StepCox[forward] + plsRcox",
                              dataset = names(list_train_vali_Data)[i],
                              #color=c("blue","green"),
                              median.line = "hv",
                              cutoff = 0.5,
                              conf.int = T,
                              xlab="Day",pval.coord=c(1000,0.9))
  )
}
aplot::plot_list(gglist=survplot,ncol=2)

head(res$riskscore$`StepCox[forward] + plsRcox`[[1]])
head(res$riskscore$`StepCox[forward] + plsRcox`[[2]])

all.auc.1y <- cal_AUC_ml_res(res.by.ML.Dev.Prog.Sig = res,train_data = list_train_vali_Data[["Dataset1"]],
                             inputmatrix.list = list_train_vali_Data,mode = 'all',AUC_time = 1,
                             auc_cal_method="KM")
all.auc.3y <- cal_AUC_ml_res(res.by.ML.Dev.Prog.Sig = res,train_data = list_train_vali_Data[["Dataset1"]],
                             inputmatrix.list = list_train_vali_Data,mode = 'all',AUC_time = 3,
                             auc_cal_method="KM")
all.auc.5y <- cal_AUC_ml_res(res.by.ML.Dev.Prog.Sig = res,train_data = list_train_vali_Data[["Dataset1"]],
                             inputmatrix.list = list_train_vali_Data,mode = 'all',AUC_time = 5,
                             auc_cal_method="KM")

auc_dis_all(all.auc.1y,
            dataset = names(list_train_vali_Data),
            validate_set=names(list_train_vali_Data)[-1],
            order= names(list_train_vali_Data),
            width = 0.35,
            year=1)
